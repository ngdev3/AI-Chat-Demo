// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  hashedPassword        String?
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  conversations         Conversation[]

  stripeCustomerId      String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId  String?   @unique @map("stripe_subscription_id")
  stripePriceId         String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  messageCount          Int       @default(0)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ASSISTANT
}

model Conversation {
  id        String     @id @default(cuid())
  name      String     @default("New Conversation")
  messages  Message[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  document  Document?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Document {
  id              String      @id @default(cuid())
  filename        String
  content         String      @db.Text
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String      @unique
  createdAt       DateTime    @default(now())
}

model Message {
  id              String        @id @default(cuid())
  content         String        @db.Text
  role            Role
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  createdAt       DateTime      @default(now())
}
